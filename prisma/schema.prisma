generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {0
  user
  admin
}

model Profile {
  id            String         @id @default(uuid())
  clerkId       String         @unique
  firstname     String
  lastname      String
  username      String
  email         String
  profileImage  String
  role          UserRole       @default(user)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  locations     Location[]
  favorites     Favorite[]
  reviews       Review[]
  Reply         Reply[]
  notifications Notification[]
  searchHistory SearchHistory[]
}

model Location {
  id            String     @id @default(cuid())
  name          String
  description   String
  category      String
  districts     String
  lat           Float
  lng           Float
  price         String
  image         String[]
  rating        Float?
  openTime      String?
  closeTime     String?
  googlePlaceId String?    @unique
  profileId     String
  profile       Profile    @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  favorites     Favorite[]
  reviews       Review[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String
}

model Review {
  id        String   @id @default(uuid())
  content   String
  rating    Int // 1-5
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String

  replies       Reply[]
  notifications Notification[]
}

model Reply {
  id       String   @id @default(uuid())
  contain  String
  createAt DateTime @default(now())

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String

  notifications Notification[]
}

model Notification {
  id        String   @id @default(uuid())
  type      String // "REPLY" หรือประเภทอื่นๆ
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // ผู้ที่ได้รับแจ้งเตือน
  recipient   Profile @relation(fields: [recipientId], references: [clerkId], onDelete: Cascade)
  recipientId String

  // รีวิวที่เกี่ยวข้อง
  review   Review? @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String?

  // reply ที่เกี่ยวข้อง
  reply   Reply?  @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId String?
}

model SearchHistory {
  id        String   @id @default(uuid())
  query     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String
}
