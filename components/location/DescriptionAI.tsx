"use client";
import { useState, useEffect } from "react";
import ReactMarkdown from "react-markdown";
import {
  Sparkles,
  Clock,
  AlertCircle,
  MapPin,
  Calendar,
  Ticket,
  Clock3,
  Utensils,
  Car,
  Phone,
  Globe,
  ThumbsUp,
  Camera,
  Map,
  Navigation,
  Sun,
  Cloud,
  Umbrella,
  RefreshCw
} from "lucide-react";
import { getWeatherData } from '@/lib/fetchWeather';
import { WeatherResponse } from '@/utils/types';

interface DescriptionAIProps {
  locationName: string;
  locationDescription: string;
  locationDistrict: string;
  locationCategory?: string;
}

export default function DescriptionAI({
  locationName,
  locationDescription,
  locationDistrict,
  locationCategory,
}: DescriptionAIProps) {
  const [aiDescription, setAiDescription] = useState<string>("");
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [weatherData, setWeatherData] = useState<WeatherResponse | null>(null);
  const [nearbyLocations, setNearbyLocations] = useState<string[]>([]);
  const [activeTab, setActiveTab] = useState<string>("description");

  useEffect(() => {
    const generateDescription = async () => {
      try {
        setIsLoading(true);
        setError(null);

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
        try {
          const weatherResponse = await getWeatherData(locationDistrict);
          setWeatherData(weatherResponse);
        } catch (weatherError) {
          console.error("Error fetching weather data:", weatherError);
          setWeatherData(null);
        }

        const prompt = `
          ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
          
          ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:
          ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${locationName}
          ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: ${locationDescription}
          ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠: ${locationDistrict}
          ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${locationCategory}
          
          ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Markdown ‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
          
          ## üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
          - ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
          - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
          - ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡∏ô‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
          
          ## üåü ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏•‡∏≤‡∏î
          - ‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô
          - ‡∏ó‡∏±‡∏®‡∏ô‡∏µ‡∏¢‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
          - ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß
          
          ## üéØ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
          - ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏î‡πâ
          - ‡∏Å‡∏µ‡∏¨‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏±‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
          - ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•
          
          ## üóìÔ∏è ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°
          - ‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°
          - ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£
          - ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•
          
          ## üí° ‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö
          - ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß
          - ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥
          - ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
          
          ## üçΩÔ∏è ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏ù‡∏≤‡∏Å
          - ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏•‡∏¥‡πâ‡∏°‡∏•‡∏≠‡∏á
          - ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
          - ‡∏Ç‡∏≠‡∏á‡∏ù‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á
          
          ## üöó ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
          - ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
          - ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
          - ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞
          
          ## üì± ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ
          - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          - ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          - ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          
          ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß
          ‡πÉ‡∏™‡πà‡πÄ‡∏Å‡∏£‡πá‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏°‡∏µ‡∏Ñ‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ
          ‡πÉ‡∏™‡πà emoji ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
          ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
          ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏ó‡∏ô
        `;

        const response = await fetch(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.NEXT_PUBLIC_GEMINI_API_KEY}`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              contents: [{ role: "user", parts: [{ text: prompt }] }],
              generationConfig: {
                temperature: 0.7,
                maxOutputTokens: 1500,
                topK: 40,
                topP: 0.95
              }
            }),
          }
        );

        if (!response.ok) {
          throw new Error(`API error: ${response.status}`);
        }

        const data = await response.json();
        const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;

        if (!generatedText) {
          throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö");
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡∏î‡∏±‡∏Å‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á)
        const nearbyPrompt = `
          ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö ${locationName} ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠${locationDistrict} 
          ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏°‡∏≤ 5 ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏à‡∏≤‡∏Å ${locationName} 
          ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö JSON array ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1 (‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á)", "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2 (‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á)", ...]
        `;

        const nearbyResponse = await fetch(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.NEXT_PUBLIC_GEMINI_API_KEY}`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              contents: [{ role: "user", parts: [{ text: nearbyPrompt }] }],
              generationConfig: {
                temperature: 0.3,
                maxOutputTokens: 500
              }
            }),
          }
        );

        if (nearbyResponse.ok) {
          const nearbyData = await nearbyResponse.json();
          const nearbyText = nearbyData.candidates?.[0]?.content?.parts?.[0]?.text;
          try {
            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° JSON ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
            const nearbyArray = JSON.parse(nearbyText.replace(/```json|```/g, '').trim());
            setNearbyLocations(nearbyArray);
          } catch (e) {
            console.error("Error parsing nearby locations:", e);
            setNearbyLocations([]);
          }
        }

        setAiDescription(generatedText);
      } catch (error) {
        console.error("Error generating description:", error);
        setError(error instanceof Error ? error.message : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏");
        setAiDescription("");
      } finally {
        setIsLoading(false);
      }
    };

    generateDescription();
  }, [locationName, locationDescription, locationDistrict, locationCategory]);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
  const getWeatherIcon = (condition: string) => {
    switch (condition.toLowerCase()) {
      case "‡πÅ‡∏î‡∏î‡∏£‡πâ‡∏≠‡∏ô": return <Sun className="h-5 w-5 text-yellow-500" />;
      case "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å": return <Cloud className="h-5 w-5 text-gray-400" />;
      case "‡∏ù‡∏ô‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢": return <Umbrella className="h-5 w-5 text-blue-400" />;
      default: return <Sun className="h-5 w-5 text-yellow-500" />;
    }
  };

  const renderTabs = () => {
    return (
      <div className="flex border-b mb-4">
        <button
          className={`px-4 py-2 font-medium ${activeTab === "description" ? "border-b-2 border-blue-500 text-blue-600" : "text-gray-600"}`}
          onClick={() => setActiveTab("description")}
        >
          <div className="flex items-center gap-2">
            <Sparkles className="h-4 w-4" />
            <span>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</span>
          </div>
        </button>
        <button
          className={`px-4 py-2 font-medium ${activeTab === "nearby" ? "border-b-2 border-blue-500 text-blue-600" : "text-gray-600"}`}
          onClick={() => setActiveTab("nearby")}
        >
          <div className="flex items-center gap-2">
            <Navigation className="h-4 w-4" />
            <span>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á</span>
          </div>
        </button>
        <button
          className={`px-4 py-2 font-medium ${activeTab === "weather" ? "border-b-2 border-blue-500 text-blue-600" : "text-gray-600"}`}
          onClick={() => setActiveTab("weather")}
        >
          <div className="flex items-center gap-2">
            <Cloud className="h-4 w-4" />
            <span>‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®</span>
          </div>
        </button>
      </div>
    );
  };

  const renderNearbyLocations = () => {
    console.log('nearbyLocations:', nearbyLocations);
    return (
      <div className="space-y-4">
        <div className="flex items-center gap-2 mb-4">
          <Navigation className="h-5 w-5 text-blue-500" />
          <h3 className="text-xl font-bold">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à</h3>
        </div>

        {nearbyLocations.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {nearbyLocations.map((location, index) => (
              <div key={index} className="flex items-center gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                <MapPin className="h-5 w-5 text-blue-500 flex-shrink-0" />
                <span className="text-gray-800 dark:text-white">{location}</span>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-gray-500 dark:text-gray-400 italic">
            ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
          </div>
        )}

        <div className="mt-6">
          <div className="flex items-center gap-2 mb-2">
            <Map className="h-5 w-5 text-green-500" />
            <h3 className="text-lg font-bold">‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</h3>
          </div>

          <div className="bg-gray-100 dark:bg-gray-700 rounded-lg h-64 flex items-center justify-center">
            <div className="text-center p-4">
              <Map className="h-10 w-10 text-gray-400 mx-auto mb-2" />
              <p className="text-gray-500 dark:text-gray-400">
                ‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á {locationName} ‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
              </p>
              <button className="mt-3 px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-full text-sm font-medium transition">
                ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Google Maps
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderWeather = () => {
    console.log('weatherData', weatherData)
    return weatherData ? (
      <div className="space-y-6">
        <div className="flex items-center gap-2 mb-4">
          <Sun className="h-5 w-5 text-yellow-500" />
          <h3 className="text-xl font-bold">‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏ì {locationName}</h3>
        </div>

        <div className="bg-gradient-to-r from-blue-50 to-sky-50 dark:from-blue-900/20 dark:to-sky-900/20 p-4 rounded-xl">
          <div className="flex items-center justify-between">
            <div>
              <h4 className="text-2xl font-bold mb-1">{Math.round(weatherData.main.temp)}¬∞C</h4>
              <p className="text-gray-600 dark:text-gray-300">{weatherData.weather[0].description}</p>
              <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {new Date().toLocaleTimeString('th-TH')}</p>
            </div>
            <div className="text-right">
              {getWeatherIcon(weatherData.weather[0].main)}
            </div>
          </div>
        </div>

        <div className="grid grid-cols-3 gap-3">
          <div className="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm text-center">
            <p className="font-medium mb-2">‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</p>
            <div className="flex justify-center mb-1">
              <Sun className="h-5 w-5 text-red-500" />
            </div>
            <p className="text-lg font-bold">{Math.round(weatherData.main.temp_max)}¬∞C</p>
          </div>
          <div className="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm text-center">
            <p className="font-medium mb-2">‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î</p>
            <div className="flex justify-center mb-1">
              <Cloud className="h-5 w-5 text-blue-500" />
            </div>
            <p className="text-lg font-bold">{Math.round(weatherData.main.temp_min)}¬∞C</p>
          </div>
          <div className="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm text-center">
            <p className="font-medium mb-2">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô</p>
            <div className="flex justify-center mb-1">
              <Umbrella className="h-5 w-5 text-blue-400" />
            </div>
            <p className="text-lg font-bold">{weatherData.main.humidity}%</p>
          </div>
        </div>

        <div className="mt-4 text-xs text-gray-500 italic text-right flex items-center justify-end gap-1">
          <RefreshCw className="h-3 w-3" />
          <span>‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {new Date().toLocaleDateString('th-TH')}</span>
        </div>

        <div className="mt-4">
          <h4 className="text-md font-bold flex items-center gap-2 mb-2">
            <AlertCircle className="h-4 w-4 text-yellow-500" />
            <span>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß</span>
          </h4>
          <p className="text-gray-700 dark:text-gray-300">
            {weatherData.weather[0].main === "Clear" ?
              "‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏Å‡∏£‡πà‡∏° ‡∏´‡∏°‡∏ß‡∏Å ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏µ‡∏°‡∏Å‡∏±‡∏ô‡πÅ‡∏î‡∏î ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠" :
              weatherData.weather[0].main === "Rain" ?
                "‡∏°‡∏µ‡∏ù‡∏ô‡∏ï‡∏Å ‡∏Ñ‡∏ß‡∏£‡∏û‡∏Å‡∏£‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ô‡∏ù‡∏ô‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ó‡∏≤‡∏á‡∏•‡∏∑‡πà‡∏ô" :
                "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡πÅ‡∏•‡∏∞‡∏û‡∏Å‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"}
          </p>
        </div>
      </div>
    ) : (
      <div className="text-gray-500 dark:text-gray-400 italic">
        ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
      </div>
    );
  };

  const renderDescriptionCards = () => {
    if (!aiDescription) return null;

    // ‡πÅ‡∏¢‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏à‡∏≤‡∏Å Markdown
    const sections = aiDescription.split('## ').filter(section => section.trim());
    
    return sections.map((section, index) => {
      const [title, ...content] = section.split('\n');
      const contentText = content.join('\n').trim();
      
      if (!contentText) return null;

      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
      const getSectionIcon = () => {
        if (title.includes('‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥')) return <Clock className="h-5 w-5 text-amber-500" />;
        if (title.includes('‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô')) return <Camera className="h-5 w-5 text-blue-500" />;
        if (title.includes('‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°')) return <Ticket className="h-5 w-5 text-green-500" />;
        if (title.includes('‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤')) return <Calendar className="h-5 w-5 text-purple-500" />;
        if (title.includes('‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥')) return <AlertCircle className="h-5 w-5 text-red-500" />;
        if (title.includes('‡∏≠‡∏≤‡∏´‡∏≤‡∏£')) return <Utensils className="h-5 w-5 text-orange-500" />;
        if (title.includes('‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á')) return <Car className="h-5 w-5 text-indigo-500" />;
        if (title.includes('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠')) return <Phone className="h-5 w-5 text-teal-500" />;
        return <Sparkles className="h-5 w-5 text-yellow-500" />;
      };

      return (
        <div key={index} className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden mb-4">
          <div className="flex items-center gap-3 bg-gray-50 dark:bg-gray-700 px-4 py-3 border-b border-gray-200 dark:border-gray-700">
            {getSectionIcon()}
            <h3 className="font-bold text-gray-800 dark:text-white">{title.trim()}</h3>
          </div>
          <div className="p-4 prose dark:prose-invert max-w-none dark:text-white">
            <ReactMarkdown>{contentText}</ReactMarkdown>
          </div>
        </div>
      );
    });
  };

  const renderContent = () => {
    if (activeTab === "description") {
      return (
        <div className="space-y-4">
          {renderDescriptionCards()}
        </div>
      );
    } else if (activeTab === "nearby") {
      return renderNearbyLocations();
    } else if (activeTab === "weather") {
      return renderWeather();
    }
  };

  const renderLocationHeader = () => {
    return (
      <div className="flex items-start gap-4 mb-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-800 dark:text-white mb-1">
            {locationName}
          </h2>
          <div className="flex items-center gap-1 text-gray-600 dark:text-gray-300 mb-2">
            <MapPin className="h-4 w-4 text-red-500" />
            <span>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠{locationDistrict}, ‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå</span>
          </div>
          <div className="flex flex-wrap gap-2">
            <span className="px-2 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full text-xs font-medium">
              {locationCategory}
            </span>
            <span className="px-2 py-1 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 rounded-full text-xs font-medium flex items-center gap-1">
              <ThumbsUp className="h-3 w-3" />
              <span>‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</span>
            </span>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
      <div className="p-6">
        <div className="flex items-center gap-2 mb-6">
          <Sparkles className="h-6 w-6 text-blue-500" />
          <h2 className="text-2xl font-bold text-gray-800 dark:text-white">
            ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß
          </h2>
        </div>

        {isLoading ? (
          <div className="flex flex-col items-center justify-center py-16 space-y-4">
            <div className="relative h-20 w-20">
              <div className="absolute inset-0 rounded-full border-t-4 border-b-4 border-blue-500 animate-spin"></div>
              <div className="absolute inset-0 flex items-center justify-center">
                <Clock className="h-10 w-10 text-blue-500" />
              </div>
            </div>
            <p className="text-gray-600 dark:text-white font-medium text-center">
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß...
              <br />
              <span className="text-sm text-gray-500 dark:text-white">‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</span>
            </p>
          </div>
        ) : error ? (
          <div className="rounded-lg bg-red-50 dark:bg-red-900/20 p-6">
            <div className="flex items-center gap-3">
              <AlertCircle className="h-6 w-6 text-red-500" />
              <p className="text-red-700 dark:text-red-300 font-medium">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ</p>
            </div>
            <p className="mt-2 text-red-600 dark:text-red-300">{error}</p>
            <button
              className="mt-4 px-4 py-2 bg-red-100 hover:bg-red-200 dark:bg-red-900/50 dark:hover:bg-red-900/70 rounded-lg text-red-700 dark:text-red-300 transition font-medium"
              onClick={() => window.location.reload()}
            >
              ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            </button>
          </div>
        ) : (
          <>
            {renderLocationHeader()}
            {renderTabs()}
            {renderContent()}
          </>
        )}

        {!isLoading && !error && (
          <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700 text-xs text-gray-500 dark:text-gray-400 italic text-right">
            ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Gemini AI ‚Ä¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {new Date().toLocaleDateString('th-TH')}
          </div>
        )}
      </div>
    </div>
  );
}