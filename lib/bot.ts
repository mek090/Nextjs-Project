function bot() {
    // ===================== ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ DOM =====================
    const chatbox = document.getElementById("chatbox") as HTMLUListElement | null;
    const chatInput = document.getElementById("chat-input-text") as HTMLInputElement | null;
    const sendChatBtn = document.getElementById("send-btn") as HTMLButtonElement | null;

    let userMessage: string = "";

    // ===================== ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ API =====================
    const API_KEY = "AIzaSyDaMjgsRJa3OX1qPLSBW8fOWbSBinWQvgQ";
    const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;

    // ===================== ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Prompt =====================
    let basePrompt = "‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠";

    // ===================== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API =====================
    async function loadPromptFromAPI() {
        try {
            const res = await fetch('/api/prompts');
            const data = await res.json();
            if (Array.isArray(data) && data.length > 0) {
                return data.map(row => row.prompt12 || row.prompt || row.text || '').filter(Boolean);
            }
            return [];
        } catch (err) {
            console.error("Error loading prompt from API:", err);
            return [];
        }
    }

    async function loadPlacesFromAPI() {
        try {
            const res = await fetch('/api/locations');
            const data = await res.json();
            if (Array.isArray(data) && data.length > 0) {
                return data;
            }
            return [];
        } catch (err) {
            console.error("Error loading places from API:", err);
            return [];
        }
    }

    // ===================== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà =====================
    function formatPlaceData(place: any): string {
        const details = [
            `‡∏ä‡∏∑‡πà‡∏≠: ${place.name}`,
            place.description ? `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${place.description}` : '',
            place.category ? `‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${place.category}` : '',
            place.districts ? `‡∏≠‡∏≥‡πÄ‡∏†‡∏≠: ${place.districts}` : '',
            (place.openTime || place.closeTime) ? `‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î: ${place.openTime || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} - ${place.closeTime || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}` : '',
            place.price ? `‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢: ${place.price}` : '',
            place.rating ? `‡πÄ‡∏£‡∏ï‡∏ï‡∏¥‡πâ‡∏á: ${place.rating}` : '',
            place.id ? `PLACE_ID:${place.id}` : '',
            (place.image && place.image.length > 0) ? `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${place.image[0]}` : ''
        ].filter(Boolean);

        return details.join('\n');
    }

    // ===================== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó =====================
    async function initializeBot() {
        try {
            const [promptsData, placesData] = await Promise.all([
                loadPromptFromAPI(),
                loadPlacesFromAPI()
            ]);

            let combinedReference = [];

            if (promptsData && promptsData.length > 0) {
                combinedReference.push(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á Prompt ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:\n${promptsData.join('\n\n---\n\n')}`);
            }

            if (placesData && placesData.length > 0) {
                const formattedPlaces = placesData
                    .map(formatPlaceData)
                    .join('\n\n---\n\n');
                combinedReference.push(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß:\n${formattedPlaces}`);
            }

            if (combinedReference.length > 0) {
                basePrompt = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏ä‡∏∑‡πà‡∏≠ "‡∏≠‡∏•‡∏¥‡∏™"

‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:
${combinedReference.join('\n\n=====\n\n')}

‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:
1. ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£
2. ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
3. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÅ‡∏ó‡πá‡∏Å [PLACE_ID:‡∏Ñ‡πà‡∏≤] ‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
4. ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ bullet points ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö
5. ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:
‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏™‡∏ß‡∏¢‡πÜ ‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏î‡πá‡∏î‡πÜ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏ñ‡∏≤‡∏°‡πÑ‡∏´‡∏°? üòä`;
            }

            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
            setTimeout(() => {
                const welcomeMessage = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏â‡∏±‡∏ô‡∏≠‡∏•‡∏¥‡∏™ ‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå üåü\n\n‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏î‡πá‡∏î‡πÜ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏ñ‡∏≤‡∏°‡πÑ‡∏´‡∏°? üòä";
                const initialBotLi = createChatLi(welcomeMessage, "incoming");
                chatbox?.appendChild(initialBotLi);
                chatbox?.scrollTo(0, chatbox.scrollHeight);
            }, 800);

        } catch (error) {
            console.error("Error initializing bot:", error);
        }
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    initializeBot();

    // ===================== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° =====================
    const createChatLi = (message: string, className: string): HTMLLIElement => {
        const chatLi = document.createElement("li");
        chatLi.classList.add("chat", className);

        let chatContent: string;
        if (className === "outgoing") {
            chatContent = `<p></p>`;
        } else {
            chatContent = `<p></p>`;
        }

        chatLi.innerHTML = chatContent;
        const p = chatLi.querySelector("p");
        if (p) {
            // ‡πÉ‡∏ä‡πâ innerHTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö bot ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö, textContent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user
            if (className === "incoming") {
                p.innerHTML = message.replace(/\n/g, '<br>');
            } else {
                p.textContent = message;
            }
        }
        return chatLi;
    };

    // ===================== ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ =====================
    let conversationHistory: { role: string; content: string }[] = [];

    // ===================== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà =====================
    function processPlaceLinks(text: string): string {
        // Remove markdown bold **...**
        let cleaned = text.replace(/\*\*(.*?)\*\*/g, '$1');
        const placeLinkRegex = /([\u0E00-\u0E7F\w\s.,'()-]+?)\[PLACE_ID:([A-Za-z0-9_-]+)\]/g;
        return cleaned.replace(placeLinkRegex, (match: string, placeName: string, placeId: string) => {
            const detailLink = ` <a href="/locations/${placeId}" target="_blank" class="place-detail-link" style="color: #2563eb; text-decoration: underline; font-weight: 500;">[‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î]</a>`;
            return `${placeName.trim()}${detailLink}`;
        });
    }

    // ===================== ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini API =====================
    const generateResponse = async (chatElement: HTMLLIElement) => {
        const messageElement = chatElement.querySelector("p");
        if (!messageElement) return;
        const safeUserMessage = userMessage ?? "";

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        conversationHistory.push({ role: "user", content: safeUserMessage });

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
        let prompt = `${basePrompt}\n\n‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:\n`;

        const recentHistory = conversationHistory.slice(-6); // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 6 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        for (const msg of recentHistory) {
            prompt += `${msg.role === "user" ? "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" : "‡∏≠‡∏•‡∏¥‡∏™"}: ${msg.content}\n`;
        }

        prompt += `\n‡∏≠‡∏•‡∏¥‡∏™:`;

        const requestOptions = {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                contents: [{ parts: [{ text: prompt }] }],
                generationConfig: {
                    temperature: 0.7,
                    maxOutputTokens: 1000,
                },
            }),
        };

        try {
            const response = await fetch(API_URL, requestOptions);
            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API");
            }

            const rawText = data.candidates[0].content.parts[0].text;

            // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            let processedText = processPlaceLinks(rawText);
            // Remove any remaining markdown bold (failsafe)
            processedText = processedText.replace(/\*\*(.*?)\*\*/g, '$1');

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß
            if (processedText.includes('place-detail-link') ||
                rawText.includes('‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà') ||
                rawText.includes('‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß')) {
                processedText += `<br><br><a href="/locations" target="_blank" class="search-all-link" style="display: inline-block; padding: 8px 16px; background-color: #10b981; color: white; text-decoration: none; border-radius: 6px; font-size: 14px; margin-top: 10px;">üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</a>`;
            }

            // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö typing effect
            messageElement.innerHTML = processedText;

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            conversationHistory.push({ role: "bot", content: rawText });

        } catch (error: any) {
            console.error("API Error:", error);
            if (messageElement) {
                messageElement.innerHTML = `<span style="color: #ef4444;">‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}</span>`;
            }
        } finally {
            // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            if (sendChatBtn) sendChatBtn.disabled = false;
            if (chatInput) {
                chatInput.disabled = false;
                chatInput.focus();
            }
            if (chatbox) chatbox.scrollTo(0, chatbox.scrollHeight);
        }
    };

    // ===================== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÅ‡∏ö‡∏ö Quick Reply =====================
    function createQuickReplyForPlaces(places: any[]): string {
        if (!places || places.length === 0) return "";

        const topPlaces = places
            .sort((a, b) => (parseFloat(b.rating) || 0) - (parseFloat(a.rating) || 0))
            .slice(0, 5);

        let reply = `üåü <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå</strong><br><br>`;

        topPlaces.forEach((place, index) => {
            const emoji = ['üèõÔ∏è', 'üå∏', 'üèûÔ∏è', 'üéØ', '‚≠ê'][index] || 'üìç';
            if (place.id) {
                reply += `${emoji} <strong>${place.name}</strong> <a href="/locations/${place.id}" target="_blank" class="place-detail-link" style="color: #2563eb; text-decoration: underline; font-weight: 500;">[‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î]</a><br>`;
            } else {
                reply += `${emoji} <strong>${place.name}</strong><br>`;
            }

            if (place.description) {
                reply += `&nbsp;&nbsp;&nbsp;&nbsp;${place.description.substring(0, 80)}${place.description.length > 80 ? '...' : ''}<br>`;
            }
            reply += `<br>`;
        });

        reply += `‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞!`;

        // Remove markdown bold from quick reply
        let cleanedReply = reply.replace(/\*\*(.*?)\*\*/g, '$1');
        return cleanedReply;
    }

    // ===================== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó =====================
    const handleChat = async () => {
        if (!chatInput || !chatbox || !sendChatBtn) return;

        userMessage = (chatInput.value ?? '').trim();
        if (!userMessage) return;

        // ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°
        chatInput.value = "";
        sendChatBtn.disabled = true;
        chatInput.disabled = true;

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        chatbox.appendChild(createChatLi(userMessage, "outgoing"));
        chatbox.scrollTo(0, chatbox.scrollHeight);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
        const suggestKeywords = [
            "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß", "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", "‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß",
            "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå", "‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°", "‡πÄ‡∏î‡πá‡∏î", "‡∏î‡∏±‡∏á", "‡πÅ‡∏ô‡∏ß‡∏ô‡∏∞", "‡πÑ‡∏õ‡πÑ‡∏´‡∏ô‡∏î‡∏µ"
        ];

        const isSuggestPlace = suggestKeywords.some(keyword =>
            userMessage.toLowerCase().includes(keyword)
        );

        if (isSuggestPlace) {
            try {
                const places = await loadPlacesFromAPI();
                if (places && places.length > 0) {
                    const reply = createQuickReplyForPlaces(places);

                    setTimeout(() => {
                        const incomingChatLi = createChatLi("", "incoming");
                        chatbox.appendChild(incomingChatLi);

                        const messageElement = incomingChatLi.querySelector("p");
                        if (messageElement) {
                            messageElement.innerHTML = reply;
                            if (sendChatBtn) sendChatBtn.disabled = false;
                            if (chatInput) {
                                chatInput.disabled = false;
                                chatInput.focus();
                            }
                        }
                    }, 600);
                    return;
                }
            } catch (error) {
                console.error("Error loading places for suggestion:", error);
            }
        }

        // ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ú‡πà‡∏≤‡∏ô Gemini API
        setTimeout(() => {
            const incomingChatLi = createChatLi("Thinking", "incoming");
            chatbox.appendChild(incomingChatLi);
            chatbox.scrollTo(0, chatbox.scrollHeight);
            generateResponse(incomingChatLi);
        }, 600);
    };

    // ===================== Event Listeners =====================
    if (chatInput) {
        chatInput.addEventListener("keydown", (e: KeyboardEvent) => {
            if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault();
                handleChat();
            }
        });
    }

    if (sendChatBtn) {
        sendChatBtn.addEventListener("click", handleChat);
    }
}

export default bot;